<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Solar Energy Calculator</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      padding: 0;
      background-color: #f4f4f9;
    }
    h1 {
      text-align: center;
      color: #333;
    }
    .calculator {
      max-width: 600px;
      margin: 0 auto;
      background: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .form-group {
      margin-bottom: 15px;
    }
    label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
    input[type="number"], select {
      width: 100%;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    button {
      display: block;
      width: 100%;
      padding: 10px;
      background-color: #28a745;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
    }
    button:hover {
      background-color: #218838;
    }
    .result {
      margin-top: 20px;
      padding: 10px;
      background-color: #e9ecef;
      border-radius: 4px;
    }
    .result p {
      margin: 5px 0;
    }
  </style>
</head>
<body>
  <h1>Solar Energy Calculator</h1>
  <div class="calculator">
    <div class="form-group">
      <label for="averageConsumption">Average Monthly Consumption (kWh):</label>
      <input type="number" id="averageConsumption" placeholder="Enter average consumption">
    </div>
    <div class="form-group">
      <label for="icptRate">ICPT Rate (RM/kWh):</label>
      <input type="number" step="0.001" id="icptRate" placeholder="Enter ICPT rate" value="0.027">
    </div>
    <div class="form-group">
      <label for="kwtbbRate">KWTBB Rate (%):</label>
      <input type="number" step="0.01" id="kwtbbRate" placeholder="Enter KWTBB rate" value="1.6">
    </div>
    <div class="form-group">
      <label for="tariffType">Tariff Type:</label>
      <select id="tariffType">
        <option value="A">A</option>
        <option value="B">B</option>
      </select>
    </div>
    <div class="form-group">
      <label for="psh">PSH (kWh/mÂ²/day):</label>
      <input type="number" step="0.1" id="psh" placeholder="Enter PSH" value="3.5">
    </div>
    <button onclick="calculate()">Calculate</button>
    <div class="result" id="result"></div>
  </div>

  <script>
    function calculate() {
      // Input values
      const averageConsumption = parseFloat(document.getElementById('averageConsumption').value);
      const icptRate = parseFloat(document.getElementById('icptRate').value);
      const kwtbbRate = parseFloat(document.getElementById('kwtbbRate').value);
      const tariffType = document.getElementById('tariffType').value;
      const psh = parseFloat(document.getElementById('psh').value);

      // Constants
      const systemCostPerKwp = 4000;

      // Calculate Proposed Capacity (rounded to 1 decimal place)
      let proposedCapacity = (averageConsumption * 12) / (psh * 390);
      proposedCapacity = Math.round(proposedCapacity * 10) / 10; // Round to 1 decimal place

      // Calculate Total Cost
      const totalCost = systemCostPerKwp * proposedCapacity;

      // Calculate Annual Generation
      const annualGeneration = (proposedCapacity * psh * 365);

      // Calculate Monthly Savings
      const monthlySavings = calculateMonthlyEnergySavings(
        averageConsumption,
        annualGeneration / 12,
        icptRate,
        kwtbbRate,
        tariffType
      );

      // Calculate ROI
      const roi = calculateROI(systemCostPerKwp, proposedCapacity, monthlySavings);

      // Calculate Payback Period
      const paybackPeriod = calculatePaybackPeriod(systemCostPerKwp, proposedCapacity, monthlySavings);

      // Display Results
      const resultDiv = document.getElementById('result');
      resultDiv.innerHTML = `
        <p><strong>Proposed Capacity:</strong> ${proposedCapacity.toFixed(1)} kWp</p>
        <p><strong>Total Cost:</strong> RM ${totalCost.toFixed(2)}</p>
        <p><strong>Monthly Savings:</strong> RM ${monthlySavings.toFixed(2)}</p>
        <p><strong>ROI:</strong> ${roi.toFixed(2)}%</p>
        <p><strong>Payback Period:</strong> ${paybackPeriod}</p>
      `;
    }

    function calculateMonthlyEnergySavings(monthlyConsumption, monthlyGeneration, icptRate, kwtbbRate, tariffType) {
      // Calculate TNB bill without solar
      const tnbBillWithoutSolar = calculateTNBbill(monthlyConsumption, icptRate, kwtbbRate, tariffType);

      // Calculate TNB bill after solar
      const tnbBillAfterSolar = calculateTNBbillAfterSolar(
        monthlyConsumption,
        monthlyGeneration,
        icptRate,
        kwtbbRate,
        tariffType
      );

      // Monthly savings
      return tnbBillWithoutSolar - tnbBillAfterSolar;
    }

    function calculateTNBbill(consumption, icptRate, kwtbbRate, tariffType) {
      // Calculate Base Rate based on Tariff Type
      let baseRate = 0;
      if (tariffType === 'A') {
        baseRate = calculateTariffA(consumption);
      } else if (tariffType === 'B') {
        baseRate = calculateTariffB(consumption);
      }

      // Calculate ICPT and KWTBB
      const icpt = consumption * icptRate;
      const kwtbb = baseRate * (kwtbbRate / 100); // Convert % to decimal

      // Calculate Total Bill
      return parseFloat((baseRate + icpt + kwtbb).toFixed(2)); // Round to 2 decimal places
    }

    function calculateTNBbillAfterSolar(consumption, solarGeneration, icptRate, kwtbbRate, tariffType) {
      // Calculate Net Consumption (Consumption - Solar Generation)
      let netConsumption = consumption - solarGeneration;

      // If Net Consumption is negative, set it to 0
      if (netConsumption < 31) {
        netConsumption = 0;
      }

      // Define Minimum Charge for Tariff A and Tariff B
      let minimumCharge = 0;
      if (tariffType === 'A') {
        minimumCharge = 7; // Minimum charge for Tariff A (Residential)
      } else if (tariffType === 'B') {
        minimumCharge = 20; // Minimum charge for Tariff B (Commercial)
      }

      // Calculate Base Rate based on Tariff Type
      let baseRate = 0;
      if (tariffType === 'A') {
        baseRate = calculateTariffA(netConsumption);
      } else if (tariffType === 'B') {
        baseRate = calculateTariffB(netConsumption);
      }

      // Calculate ICPT and KWTBB
      const icpt = netConsumption * icptRate;
      const kwtbb = baseRate * (kwtbbRate / 100); // Convert % to decimal

      // Calculate Total Bill
      let totalBill = 0;
      if (netConsumption === 0) {
        totalBill = minimumCharge + icpt + kwtbb;
      } else {
        totalBill = baseRate + icpt + kwtbb;
      }

      return parseFloat(totalBill.toFixed(2)); // Round to 2 decimal places
    }

    function calculateTariffA(consumption) {
      if (consumption <= 200) return parseFloat((consumption * 0.218).toFixed(2));
      else if (consumption <= 300) return parseFloat((200 * 0.218 + (consumption - 200) * 0.334).toFixed(2));
      else if (consumption <= 600)
        return parseFloat((200 * 0.218 + 100 * 0.334 + (consumption - 300) * 0.516).toFixed(2));
      else if (consumption <= 900)
        return parseFloat((200 * 0.218 + 100 * 0.334 + 300 * 0.516 + (consumption - 600) * 0.545).toFixed(2));
      else
        return parseFloat((
          200 * 0.218 +
          100 * 0.334 +
          300 * 0.516 +
          300 * 0.545 +
          (consumption - 900) * 0.571
        ).toFixed(2));
    }

    function calculateTariffB(consumption) {
      if (consumption <= 200) return parseFloat((consumption * 0.435).toFixed(2));
      else return parseFloat((200 * 0.435 + (consumption - 200) * 0.509).toFixed(2));
    }

    function calculateROI(systemCost, systemCapacity, monthlySavings) {
      const annualSavings = monthlySavings * 12;
      const totalCost = systemCost * systemCapacity;
      return parseFloat(((annualSavings / totalCost) * 100).toFixed(2)); // Round to 2 decimal places
    }

    function calculatePaybackPeriod(systemCost, systemCapacity, monthlySavings) {
      const annualSavings = monthlySavings * 12;
      const totalCost = systemCost * systemCapacity;
      const paybackPeriod = totalCost / annualSavings;

      const years = Math.floor(paybackPeriod);
      const months = Math.round((paybackPeriod - years) * 12);

      return `${years} years ${months} months`;
    }
  </script>
</body>
</html>
